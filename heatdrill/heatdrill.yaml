apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: heatdrill-template
  annotations:
    openshift.io/display-name: "All components for AGI Heatdrill Service"
    description: >-
      "Creates all necessary components for the AGI Heatdrill Service"
    openshift.io/long-description: >-
      "Creates all necessary components for the AGI Heatdrill Service"
    tags: "agi,gdi,heatdrill,java"
    iconClass: icon-java
labels:
  createdBy: heatdrill-template
parameters:
  - description: DB Server
    name: DB_SERVER
    value:
  - description: DB Passwort
    name: DB_PW
    value:
  - description: Name for Environment
    name: env
    required: true
    value: test
  - description: Version of Image
    name: version
    required: true
    value:
  - description: Scheduled "true/false"
    name: scheduled
    required: true
    value: "false"
  - name: CPU_LIMIT
    description: "Set Limit for cpu"
    required: true
  - name: MEMORY_LIMIT
    description: "Set Limit for Memory Usage"
    required: true
  - name: CPU_REQUEST
    description: "Set Request for cpu"
    required: true
  - name: MEMORY_REQUEST
    description: "Set Request for Memory"
    required: true
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: heatdrill-service
    labels:
      application: heatdrill-service
  spec:
    tags:
    - from:
        kind: DockerImage
        name: sogis/heatdrill:${version}
      importPolicy:
        scheduled: ${{scheduled}}
      name: ${version}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: template-heatdrill
      description: Deployment Config for heatdrill-service Pod
    creationTimestamp: null
    generation: 1
    labels:
      application: heatdrill-service
    name: heatdrill-service
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: heatdrill-service
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 10%
        maxUnavailable: 10%
        timeoutSeconds: 60
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: template-heatdrill
        creationTimestamp: null
        labels:
          application: heatdrill-service
          deploymentconfig: heatdrill-service
      spec:
        containers:
        - env:
          - name: SPRING_APPLICATION_JSON
            value: >-
              {"db-connection":{"url":"jdbc:postgresql://${DB_SERVER}:5432/sogis","userName":"mswrite","password":"${DB_PW}"}}
          image: sogis/heatdrill
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 30
          imagePullPolicy: IfNotPresent
          name: heatdrill-service
          ports:
          - containerPort: 80
            protocol: TCP
          resources:
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - heatdrill-service
        from:
          kind: ImageStreamTag
          name: heatdrill-service:${version}
          namespace: agi-apps-${env}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: heatdrill-service
    annotations:
      description: http port of application
    labels: 
      application: heatdrill-service
  spec:
    selector:
      deploymentconfig: heatdrill-service
    ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      name: "80"

