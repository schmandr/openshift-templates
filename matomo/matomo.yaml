apiVersion: v1
kind: Template
metadata:
  name: matomo
  annotations:
    description: "Liberating Analytics. Matomo is the only web and mobile analytics platform that gives you full control over your data and more."
    tags: "analytics,piwik,matomo"
    iconClass: fa-cloud-upload
    template.openshift.io/provider-display-name: "tobrunet"
    template.openshift.io/documentation-url: "https://github.com/tobru/piwik-openshift/blob/master/README.md"
    template.openshift.io/support-url: "https://github.com/tobru/piwik-openshift/issues"
parameters:
- name: APP_URL
  description: Application URL of Matomo (Route/host)
  required: true
- name: MATOMO_IMAGE_SOURCE
  description: Source of the Matomo Docker Image to deploy
  value: matomo
- name: MATOMO_IMAGE_TAG
  description: Tag of the Matomo Docker Image to deploy
  value: 4.3.1-fpm
- name: NGINX_DOCKERFILE_REPO
  description: Nginx Dockerfile source repository
  value: https://github.com/sogis/piwik-openshift.git
- name: PVC_SIZE_CONFIG
  description: PVC size for config files
  value: 1Gi
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: app-config
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${PVC_SIZE_CONFIG}
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: matomo
    name: matomo
  spec:
    tags:
    - annotations:
        openshift.io/imported-from: ${MATOMO_IMAGE_SOURCE}:${MATOMO_IMAGE_TAG}
      from:
        kind: DockerImage
        name: ${MATOMO_IMAGE_SOURCE}:${MATOMO_IMAGE_TAG}
      importPolicy:
        scheduled: true
      name: ${MATOMO_IMAGE_TAG}
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: matomo
    name: nginx
  spec:
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: nginxinc/nginx-unprivileged:stable
      generation: null
      importPolicy: {}
      name: stable
      referencePolicy:
        type: ""
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: matomo
    name: matomo
  spec:
    replicas: 1
    selector:
      app: matomo
      deploymentconfig: matomo
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: matomo
          deploymentconfig: matomo
      spec:
        containers:
        - image: matomo
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9000
            timeoutSeconds: 5
          name: matomo
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9000
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/www/html
            name: matomo-source
          - mountPath: /var/www/html/misc
            name: app-config
            subPath: misc
          - mountPath: /var/www/html/config
            name: app-config
            subPath: config
        - image: nginxinc/nginx-unprivileged:stable
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          name: nginx
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/www/html
            name: matomo-source
          - mountPath: /etc/nginx/nginx.conf
            name: nginx-config-claim
            subPath: nginx.conf
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: matomo-source
        - name: app-config
          persistentVolumeClaim:
            claimName: app-config
        - configMap:
            name: nginx-conf
            items:
              - key: nginx.conf
                path: nginx.conf
          name: nginx-config-claim
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - matomo
        from:
          kind: ImageStreamTag
          name: matomo:${MATOMO_IMAGE_TAG}
      type: ImageChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - nginx
        from:
          kind: ImageStreamTag
          name: nginx:stable
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: matomo
    name: matomo
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: matomo
      deploymentconfig: matomo
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: matomo
  spec:
    host: ${APP_URL}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: matomo
      weight: 100
    wildcardPolicy: None
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: matomo
  spec:
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 1
    concurrencyPolicy: Replace
    jobTemplate:
      spec:
        activeDeadlineSeconds: 3600
        template:
          spec:
            containers:
            - command:
              - bash
              - -c
              - tar cf - --one-file-system -C /usr/src/matomo . | tar xf - --no-overwrite-dir
                && php -f /var/www/html/console core:archive
              image: ${MATOMO_IMAGE_SOURCE}:${MATOMO_IMAGE_TAG}
              imagePullPolicy: Always
              name: cron
              resources: {}
              terminationMessagePath: /dev/termination-log
              volumeMounts:
              - mountPath: /var/www/html
                name: matomo-source
              - mountPath: /var/www/html/misc
                name: app-config
                subPath: misc
              - mountPath: /var/www/html/config
                name: app-config
                subPath: config
            dnsPolicy: ClusterFirst
            restartPolicy: OnFailure
            securityContext: {}
            terminationGracePeriodSeconds: 30
            volumes:
            - emptyDir: {}
              name: matomo-source
            - name: app-config
              persistentVolumeClaim:
                claimName: app-config
    schedule: '05 * * * *'
    suspend: false
- apiVersion: v1
  data:
    nginx.conf: |
      # user www-data;
      worker_processes 1;
      error_log /dev/stdout alert;
      pid /tmp/nginx.pid;

      events {
        worker_connections 1024;
      }

      http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;

        upstream php-handler {
          server localhost:9000;
        }

        server {
          listen *:8080 default_server;
          listen [::]:8080 default_server;
          server_name _;
          access_log /dev/stdout;

          # Docker default IP range
          set_real_ip_from 172.16.0.0/12;
          real_ip_header X-Forwarded-For;

          # Path to the root of your installation
          root /var/www/html/;
          index index.php;

          ## deny access to all other .php files
          location ~* ^.+\.php$ {
              deny all;
              return 403;
          }

          ## serve all other files normally
          location / {
              try_files $uri $uri/ =404;
          }

          ## disable all access to the following directories
          location ~ ^/(config|tmp|core|lang) {
              deny all;
              return 403; # replace with 404 to not show these directories exist
          }
          
          location ~ /\.ht {
              deny  all;
              return 403;
          }

          location ~ js/container_.*_preview\.js$ {
              expires off;
              add_header Cache-Control 'private, no-cache, no-store';
          }

          location ~ \.(gif|ico|jpg|png|svg|js|css|htm|html|mp3|mp4|wav|ogg|avi|ttf|eot|woff|woff2|json)$ {
              allow all;
              ## Cache images,CSS,JS and webfonts for an hour
              ## Increasing the duration may improve the load-time, but may cause old files to show after an Matomo upgrade
              expires 1h;
              add_header Pragma public;
              add_header Cache-Control "public";
          }

          location ~ ^/(libs|vendor|plugins|misc|node_modules) {
              deny all;
              return 403;
          }

          ## properly display textfiles in root directory
          location ~/(.*\.md|LEGALNOTICE|LICENSE) {
              default_type text/plain;
          }

          ## Relay all index.php requests to fastcgi.
          location = /index.php {
              fastcgi_split_path_info ^(.+\.php)(/.*)$;
              include fastcgi_params;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_param PATH_INFO $fastcgi_path_info;
              fastcgi_param HTTPS on;
              fastcgi_param REMOTE_ADDR $http_x_forwarded_for;
              #Avoid sending the security headers twice
              fastcgi_param modHeadersAvailable true;
              fastcgi_param front_controller_active true;
              fastcgi_pass php-handler;
              fastcgi_intercept_errors on;
              fastcgi_request_buffering off;
              ## cache ui for 5m (set the same interval of your crontab)
              #include apps/piwik/fcgi_piwik_cache.conf;
          }

          ## Relay all piwik.php requests to fastcgi.
          location = /piwik.php {
              fastcgi_split_path_info ^(.+\.php)(/.*)$;
              include fastcgi_params;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_param PATH_INFO $fastcgi_path_info;
              fastcgi_param HTTPS on;
              fastcgi_param REMOTE_ADDR $http_x_forwarded_for;
              #Avoid sending the security headers twice
              fastcgi_param modHeadersAvailable true;
              fastcgi_param front_controller_active true;
              fastcgi_pass php-handler;
              fastcgi_intercept_errors on;
              fastcgi_request_buffering off;
              #include apps/piwik/fcgi_piwik_long_cache.conf;
          }

          # Add headers to serve security related headers
          # Before enabling Strict-Transport-Security headers please read into this
          # topic first.
          # add_header Strict-Transport-Security "max-age=15768000;
          #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;
          # includeSubDomains; preload;";
          #
        }
      }
  kind: ConfigMap
  metadata:
    name: nginx-conf
